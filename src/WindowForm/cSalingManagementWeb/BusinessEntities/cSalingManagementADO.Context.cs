//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class cSalingManagementEntities : DbContext
    {
        public cSalingManagementEntities()
            : base("name=cSalingManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<M_Account> M_Account { get; set; }
        public DbSet<M_Category> M_Category { get; set; }
        public DbSet<M_Department> M_Department { get; set; }
        public DbSet<M_Employee> M_Employee { get; set; }
        public DbSet<M_Role> M_Role { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<M_ProductInfo> M_ProductInfo { get; set; }
        public DbSet<T_Import> T_Import { get; set; }
        public DbSet<M_Supplier> M_Supplier { get; set; }
        public DbSet<M_City> M_City { get; set; }
        public DbSet<M_District> M_District { get; set; }
        public DbSet<M_Ward> M_Ward { get; set; }
        public DbSet<M_CustomerType> M_CustomerType { get; set; }
        public DbSet<M_Customer> M_Customer { get; set; }
        public DbSet<T_Order> T_Order { get; set; }
        public DbSet<T_OrderDetail> T_OrderDetail { get; set; }
    
        public virtual ObjectResult<Nullable<short>> InsertM_CategoryInfo(string cate_name, string description, string image, Nullable<int> status)
        {
            var cate_nameParameter = cate_name != null ?
                new ObjectParameter("cate_name", cate_name) :
                new ObjectParameter("cate_name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("InsertM_CategoryInfo", cate_nameParameter, descriptionParameter, imageParameter, statusParameter);
        }
    
        public virtual ObjectResult<M_Category> SelectAll_M_Category()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Category>("SelectAll_M_Category");
        }
    
        public virtual ObjectResult<M_Category> SelectAll_M_Category(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Category>("SelectAll_M_Category", mergeOption);
        }
    
        public virtual ObjectResult<SelectAll_M_ProductInfoWithImportInfo_Result> SelectAll_M_ProductInfoWithImportInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAll_M_ProductInfoWithImportInfo_Result>("SelectAll_M_ProductInfoWithImportInfo");
        }
    
        public virtual ObjectResult<SelectAll_M_ProductInfoWithImportInfo_Result> SelectAll_M_ProductInfoWithImportInfo_ByProductID(string productID)
        {
            var productIDParameter = productID != null ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAll_M_ProductInfoWithImportInfo_Result>("SelectAll_M_ProductInfoWithImportInfo_ByProductID", productIDParameter);
        }
    
        public virtual int InsertM_ProductInfo(string product_name, string category, Nullable<int> instock, string image, Nullable<double> price, string description, string preservation, string howtouse, string origin, Nullable<int> status)
        {
            var product_nameParameter = product_name != null ?
                new ObjectParameter("product_name", product_name) :
                new ObjectParameter("product_name", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var instockParameter = instock.HasValue ?
                new ObjectParameter("instock", instock) :
                new ObjectParameter("instock", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var preservationParameter = preservation != null ?
                new ObjectParameter("preservation", preservation) :
                new ObjectParameter("preservation", typeof(string));
    
            var howtouseParameter = howtouse != null ?
                new ObjectParameter("howtouse", howtouse) :
                new ObjectParameter("howtouse", typeof(string));
    
            var originParameter = origin != null ?
                new ObjectParameter("origin", origin) :
                new ObjectParameter("origin", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertM_ProductInfo", product_nameParameter, categoryParameter, instockParameter, imageParameter, priceParameter, descriptionParameter, preservationParameter, howtouseParameter, originParameter, statusParameter);
        }
    
        public virtual int UpdateM_ProductInfo(string product_id, string product_name, string category, Nullable<int> instock, string image, Nullable<double> price, string description, string preservation, string howtouse, string origin, Nullable<int> status)
        {
            var product_idParameter = product_id != null ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(string));
    
            var product_nameParameter = product_name != null ?
                new ObjectParameter("product_name", product_name) :
                new ObjectParameter("product_name", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var instockParameter = instock.HasValue ?
                new ObjectParameter("instock", instock) :
                new ObjectParameter("instock", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var preservationParameter = preservation != null ?
                new ObjectParameter("preservation", preservation) :
                new ObjectParameter("preservation", typeof(string));
    
            var howtouseParameter = howtouse != null ?
                new ObjectParameter("howtouse", howtouse) :
                new ObjectParameter("howtouse", typeof(string));
    
            var originParameter = origin != null ?
                new ObjectParameter("origin", origin) :
                new ObjectParameter("origin", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateM_ProductInfo", product_idParameter, product_nameParameter, categoryParameter, instockParameter, imageParameter, priceParameter, descriptionParameter, preservationParameter, howtouseParameter, originParameter, statusParameter);
        }
    
        public virtual ObjectResult<M_ProductInfo> SelectAll_M_ProductInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_ProductInfo>("SelectAll_M_ProductInfo");
        }
    
        public virtual ObjectResult<M_ProductInfo> SelectAll_M_ProductInfo(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_ProductInfo>("SelectAll_M_ProductInfo", mergeOption);
        }
    
        public virtual ObjectResult<M_Supplier> SelectAll_M_Supplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Supplier>("SelectAll_M_Supplier");
        }
    
        public virtual ObjectResult<M_Supplier> SelectAll_M_Supplier(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Supplier>("SelectAll_M_Supplier", mergeOption);
        }
    
        public virtual int InsertT_Import(string productID, string supplier, Nullable<int> quantity, string user)
        {
            var productIDParameter = productID != null ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("supplier", supplier) :
                new ObjectParameter("supplier", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertT_Import", productIDParameter, supplierParameter, quantityParameter, userParameter);
        }
    
        public virtual ObjectResult<SelectAll_M_ProductInfoWithImportInfo_Result> SelectAll_M_ProductInfoWithImportInfo_OnWaiting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAll_M_ProductInfoWithImportInfo_Result>("SelectAll_M_ProductInfoWithImportInfo_OnWaiting");
        }
    
        public virtual int Update_T_ImportProduct(string productid, Nullable<System.DateTime> importdate, string supplier, Nullable<int> quantity, Nullable<int> instock, Nullable<int> onorder, Nullable<double> price, Nullable<System.DateTime> expiriondate, string user, Nullable<int> vote, Nullable<int> status, Nullable<System.DateTime> newimportdate)
        {
            var productidParameter = productid != null ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(string));
    
            var importdateParameter = importdate.HasValue ?
                new ObjectParameter("importdate", importdate) :
                new ObjectParameter("importdate", typeof(System.DateTime));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("supplier", supplier) :
                new ObjectParameter("supplier", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var instockParameter = instock.HasValue ?
                new ObjectParameter("instock", instock) :
                new ObjectParameter("instock", typeof(int));
    
            var onorderParameter = onorder.HasValue ?
                new ObjectParameter("onorder", onorder) :
                new ObjectParameter("onorder", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var expiriondateParameter = expiriondate.HasValue ?
                new ObjectParameter("expiriondate", expiriondate) :
                new ObjectParameter("expiriondate", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var voteParameter = vote.HasValue ?
                new ObjectParameter("vote", vote) :
                new ObjectParameter("vote", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var newimportdateParameter = newimportdate.HasValue ?
                new ObjectParameter("newimportdate", newimportdate) :
                new ObjectParameter("newimportdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_T_ImportProduct", productidParameter, importdateParameter, supplierParameter, quantityParameter, instockParameter, onorderParameter, priceParameter, expiriondateParameter, userParameter, voteParameter, statusParameter, newimportdateParameter);
        }
    
        public virtual ObjectResult<M_City> SelectAll_M_City()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_City>("SelectAll_M_City");
        }
    
        public virtual ObjectResult<M_City> SelectAll_M_City(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_City>("SelectAll_M_City", mergeOption);
        }
    
        public virtual ObjectResult<M_District> SelectAll_M_District()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_District>("SelectAll_M_District");
        }
    
        public virtual ObjectResult<M_District> SelectAll_M_District(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_District>("SelectAll_M_District", mergeOption);
        }
    
        public virtual ObjectResult<M_Ward> SelectAll_M_Ward()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Ward>("SelectAll_M_Ward");
        }
    
        public virtual ObjectResult<M_Ward> SelectAll_M_Ward(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Ward>("SelectAll_M_Ward", mergeOption);
        }
    
        public virtual ObjectResult<M_CustomerType> SelectAll_M_CustomerType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_CustomerType>("SelectAll_M_CustomerType");
        }
    
        public virtual ObjectResult<M_CustomerType> SelectAll_M_CustomerType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_CustomerType>("SelectAll_M_CustomerType", mergeOption);
        }
    
        public virtual ObjectResult<string> InsertM_CustomerInfo(string name, Nullable<System.DateTime> birthday, string phone, string mobile, string address, string ward, string district, string city, string descript, string customer_type, Nullable<int> customer_status, Nullable<int> customer_point)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("birthday", birthday) :
                new ObjectParameter("birthday", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var wardParameter = ward != null ?
                new ObjectParameter("ward", ward) :
                new ObjectParameter("ward", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("district", district) :
                new ObjectParameter("district", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("descript", descript) :
                new ObjectParameter("descript", typeof(string));
    
            var customer_typeParameter = customer_type != null ?
                new ObjectParameter("customer_type", customer_type) :
                new ObjectParameter("customer_type", typeof(string));
    
            var customer_statusParameter = customer_status.HasValue ?
                new ObjectParameter("customer_status", customer_status) :
                new ObjectParameter("customer_status", typeof(int));
    
            var customer_pointParameter = customer_point.HasValue ?
                new ObjectParameter("customer_point", customer_point) :
                new ObjectParameter("customer_point", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertM_CustomerInfo", nameParameter, birthdayParameter, phoneParameter, mobileParameter, addressParameter, wardParameter, districtParameter, cityParameter, descriptParameter, customer_typeParameter, customer_statusParameter, customer_pointParameter);
        }
    
        public virtual ObjectResult<M_Customer> SelectAll_M_CustomerInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Customer>("SelectAll_M_CustomerInfo");
        }
    
        public virtual ObjectResult<M_Customer> SelectAll_M_CustomerInfo(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Customer>("SelectAll_M_CustomerInfo", mergeOption);
        }
    
        public virtual ObjectResult<M_Customer> Select_M_CustomerInfo_ByCustomerID(string customerid)
        {
            var customeridParameter = customerid != null ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Customer>("Select_M_CustomerInfo_ByCustomerID", customeridParameter);
        }
    
        public virtual ObjectResult<M_Customer> Select_M_CustomerInfo_ByCustomerID(string customerid, MergeOption mergeOption)
        {
            var customeridParameter = customerid != null ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<M_Customer>("Select_M_CustomerInfo_ByCustomerID", mergeOption, customeridParameter);
        }
    
        public virtual ObjectResult<string> InsertT_OrderInfo(string customerid, Nullable<System.DateTime> createdate, string user, string memo, Nullable<System.DateTime> shiptime, Nullable<int> orderstatus)
        {
            var customeridParameter = customerid != null ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(string));
    
            var createdateParameter = createdate.HasValue ?
                new ObjectParameter("createdate", createdate) :
                new ObjectParameter("createdate", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            var shiptimeParameter = shiptime.HasValue ?
                new ObjectParameter("shiptime", shiptime) :
                new ObjectParameter("shiptime", typeof(System.DateTime));
    
            var orderstatusParameter = orderstatus.HasValue ?
                new ObjectParameter("orderstatus", orderstatus) :
                new ObjectParameter("orderstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertT_OrderInfo", customeridParameter, createdateParameter, userParameter, memoParameter, shiptimeParameter, orderstatusParameter);
        }
    
        public virtual int InsertT_OrderDetailInfo(string orderid, string productid, Nullable<System.DateTime> importdate, Nullable<int> quantity, Nullable<double> sellingprice, Nullable<double> total, Nullable<int> status)
        {
            var orderidParameter = orderid != null ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(string));
    
            var productidParameter = productid != null ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(string));
    
            var importdateParameter = importdate.HasValue ?
                new ObjectParameter("importdate", importdate) :
                new ObjectParameter("importdate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var sellingpriceParameter = sellingprice.HasValue ?
                new ObjectParameter("sellingprice", sellingprice) :
                new ObjectParameter("sellingprice", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertT_OrderDetailInfo", orderidParameter, productidParameter, importdateParameter, quantityParameter, sellingpriceParameter, totalParameter, statusParameter);
        }
    }
}
